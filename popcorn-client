#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2009-2011 Pavol Rusnak <stick@gk2.sk>
# Copyright (c) 2011 Ionuț Arțăriși <iartarisi@suse.cz>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

import httplib
import os
import platform
import re
import rpm
import smtplib
import socket
import sys
import time
import gzip
import cStringIO

POST_SERVER = 'localhost:5000'
POST_URI = '/'
VERSION = '0.1'
HWUUID_FILE = '/var/lib/dbus/machine-id'

days_recent = 30
days_voted = 30

pathre = ('^/(bin|boot|lib|lib64|sbin|usr/bin|usr/games|usr/include|usr/lib|'
          'usr/lib64|usr/libexec|usr/sbin)/')

system_mounts = ['binfmt_misc', 'debugfs', 'devpts', 'fuse.gvfs-fuse-daemon',
                 'fusectl', 'nfs', 'nfs4', 'proc', 'rootfs', 'rpc_pipefs',
                 'securityfs', 'sysfs']


class Statistics:  # TODO break this class into functions
    # this needs to be a set, because rpm.TransactionSet().dbMatch()
    # sometimes returns duplicate packages with only a few
    # inconsequential headers differing e.g. RPMTAG_INSTALLTIME,
    # RPMTAG_OLDFILENAMES, RPMTAG_INSTALLTID
    packages = set()

    def fill_packages(self):  # XXX this method is way too long
        pathreprg = re.compile(pathre)
        now = int(time.time())

        # detect mountpoints that are atime and noatime
        atime_mounts = []
        noatime_mounts = []
        try:
            f = open('/proc/mounts', 'r')
            for line in f:
                mount = line.split(' ', 4)
                if not mount[2] in system_mounts:
                    if mount[3].find('noatime') < 0:
                        atime_mounts.append(mount[1])
                    else:
                        noatime_mounts.append(mount[1])
            f.close()
        except:
            pass

        ts = rpm.TransactionSet()
        mi = ts.dbMatch()
        for h in mi:
            name = h[rpm.RPMTAG_NAME]
            if name == 'gpg-pubkey':
                continue
            installed = h[rpm.RPMTAG_INSTALLTIME]
            (accessed, atime) = (0, 0)
            if len(atime_mounts) > 0:
                for file in h[rpm.RPMTAG_FILENAMES]:
                    # skip non-watched files
                    if not pathreprg.match(file):
                        continue
                    noatime_length = len([i for i in noatime_mounts if
                                         file.startswith(i)])
                    atime_length = len([i for i in atime_mounts if
                                       file.startswith(i)])
                    # if the file is mounted from noatime mountpoint, skip it
                    if noatime_length > 0 and atime_length <= 0:
                        continue
                    try:
                        (atime, ) = os.stat(file)[7:8]
                        if atime > accessed:
                            accessed = atime
                    except:
                        pass
            if accessed == 0:
                cat = 'n'  # no-files
            else:
                if now - installed < days_recent * 86400:
                    cat = 'r'  # recent
                else:
                    if now - accessed < days_voted * 86400:
                        cat = 'v'  # voted
                    else:
                        cat = 'o'  # old
            version = h[rpm.RPMTAG_VERSION] or 'None'
            release = h[rpm.RPMTAG_RELEASE] or 'None'
            arch = h[rpm.RPMTAG_ARCH]
            vendor = h[rpm.RPMTAG_VENDOR] or 'Unknown'
            # collate to string as it can be a long
            epoch = str(h[rpm.RPMTAG_EPOCH]) or 'None'
            self.packages.add((cat, name, version, release, epoch, arch,
                              vendor))

    def serialize(self):
        distro, distro_ver, code = platform.linux_distribution()
        arch = platform.machine()
        uuid = get_system_id()
        ret = [('POPCORN %(version)s %(distro)s %(distro_ver)s %(arch)s '
                '%(uuid)s') % dict(version=VERSION, **locals())]
        for pkg in self.packages:
            ret.append(' '.join(pkg))
        ret.append('')
        return '\n'.join(ret)


def get_system_id():
    with open(HWUUID_FILE) as f:
        return f.read().strip()


class Client:
    def __init__(self):
        stats = Statistics()
        stats.fill_packages()
        self.data = stats.serialize()
        # write the submission text to a file so it can be inspected easily
        with open('/tmp/submission.txt', 'w') as f:
            f.write(self.data)

    def post(self, compress=True):
        """Send a POST request to the default server

        """
        if compress:
            content = gzip_compress(self.data)
            headers = {'Content-Encoding': 'gzip', }
        else:
            content = self.data
        (content_type, body) = multipart(content)
        try:
            headers['Content-Type'] = content_type
        except NameError:
            headers = {'Content-Type': content_type, }
        conn = httplib.HTTPConnection(POST_SERVER)
        try:
            conn.request("POST", POST_URI, body, headers)
        except socket.error, e:
            sys.exit("Could not connect to the Popcorn server. %s" % e)
        response = conn.getresponse()
        print response.read()


def multipart(data):
    """Return multipart content (rfc1341) as one file from data"""
    # we will hopefully not need this anymore in the future:
    # http://bugs.python.org/issue3244
    BOUNDARY = 'gc0p4Jq0M2Yt08jU534c0p'
    CRLF = '\r\n'
    L = []

    L.append('--' + BOUNDARY)
    L.append('Content-Disposition: form-data; '
             'name="popcorn"; filename="popcorn"')
    L.append('Content-Type: text/plain')
    L.append('')
    L.append(data)
    L.append('--' + BOUNDARY + '--')
    L.append('')

    body = CRLF.join(L)
    content_type = 'multipart/form-data; boundary=%s' % BOUNDARY
    return (content_type, body)


def gzip_compress(data):
    """Return gzip of data as string"""
    buf = cStringIO.StringIO()
    f = gzip.GzipFile(mode='wb',  fileobj=buf)
    f.write(data)
    f.close()
    return buf.getvalue()

if __name__ == '__main__':
    client = Client()
    client.post()
